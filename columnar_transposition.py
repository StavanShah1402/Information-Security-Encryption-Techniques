# -*- coding: utf-8 -*-
"""Columnar_transposition

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MwZ2B6griBOkCmvvwnl9ZXQj8c2v01BO
"""

def printMat(mat):
  for i in mat:
    print(i)


def encrypt(pt,key):
  matrix=[]
  # print(matrix)
  n=len(key)
  temp=pt
  completed=False
 
  while(len(temp)!=0):
    level=[]
    if(not completed):

      for j in range(n):
        if(len(temp)!=0):
          level.append(temp[0])
          temp=temp[1:]
        else:
          level.append('x')
          completed=True
      # print(level)
      
      
      matrix.append(level)
  
  printMat(matrix)
  # print(key)
  original_map=[]
  for i,alpha in enumerate(key):
    original_map.append([alpha,i])
  key=list(key)
  temp=list(sorted(key))
  map=[]
  for i,alpha in enumerate(temp):
    map.append([alpha,i])
  n=len(matrix)
  transpose=[]
  for i in range(len(key)):
    level=[]
    for j in range(n):
      level.append(matrix[j][i])
    transpose.append(level)
  printMat(transpose)
  ans=""
  visited=[]
  for i in map:
    alpha=i[0]
    index=0
    for y in original_map:
      if(y[0]==alpha and y[1] not in visited):
        index=y[1]
        visited.append(index)
        break
    temp=transpose[index]
    for j in temp:
      ans+=j
  return (ans,original_map,map)
encrypt("columnartransposition","heaven")
import math
def decrypt(map,o_map,key,ct):
  n_rows=math.ceil(len(ct)/len(key))
  text=[ct[i:i+n_rows] for i in range(0, len(ct), n_rows)]
  print(text)
  indexes=[]
  visited=[]
  for i in map:
    alpha=i[0]
    index=0
    for y in o_map:
      if(y[0]==alpha and y[1] not in visited):
        index=y[1]
        visited.append(index)
        break
    indexes.append(index)
  mat=[]
  for i in indexes:
    mat.append(text[i])
  ans=[]
  for i in range(n_rows):
    first=([word[i] for word in mat])
    ans.append(first)
  fans=""
  for word in ans:
    x="".join([str(i) for i in word])
    fans+=x
  index=fans.find('x')
  if index!=-1:
    fans=fans[:index]
  return fans
pt="columnartransposition"
key="heaven"
cipher_text,o_map,map=encrypt(pt,key)
print("Cipher text is: ",cipher_text)
plain_text=decrypt(o_map,map,key,cipher_text)
print("Plain text is: ",plain_text)

